all: build

#
# Flags:
#

# srcdir=$(shell pwd)

POPPER=ruby $(srcdir)/scripts/preproc.rb

ifndef PLATFORM
PLATFORM=posix
endif

ifndef BITS
BITS=64
endif

ifndef LIBC
LIBC=1
endif

ifndef DYNAMIC
DYNAMIC=1
endif

DEFINES+=-DPLATFORM=$(PLATFORM) -DPLATFORM_$(PLATFORM)=1
DEFINES+=-DDYNAMIC=$(DYNAMIC)
DEFINES+=-DBITS=$(BITS)

CFLAGS+=$(DEFINES)
LD=$(CC)

CFLAGS+=-m$(BITS)

ifeq ($(LIBC),1)
ifeq ($(PLATFORM),windows)
LDFLAGS=-m$(BITS) -mconsole -no-pie
else
LDFLAGS=-m$(BITS) -no-pie -ldl
endif
else
ifeq ($(BITS),32)
LDFLAGS=-m elf_i386 -e main
else
LDFLAGS=-m elf_x86_64 -e main
endif
endif

#
# Output directories
#

OUTDIR=$(srcdir)/build/$(PLATFORM)-$(BITS)
OBJDIR=$(OUTDIR)/objects
SRC=$(srcdir)/src
TESTDIR=$(srcdir)/tests
INCDIR=$(srcdir)/include

define directory
$1 : $(patsubst %/,%,$(dir $1))
	mkdir -p $$@
endef

# $(eval $(call directory,$(OUTDIR)))

DIRECTORIES=$(OUTDIR) $(OUTDIR)/bin $(OUTDIR)/lib $(OUTDIR)/objects $(OUTDIR)/tests $(OUTDIR)/popped

$(foreach d,$(DIRECTORIES),$(eval $(call directory,$(d))))

outdirs: $(DIRECTORIES)

#
# Patterns
#

EXEC_SUFFIX=
OBJ_SUFFIX=.o
LIB_SUFFIX=.a
SO_SUFFIX=.so

ifeq ($(PLATFORM),windows)
EXEC_SUFFIX=.exe
OBJ_SUFFIX=.o
LIB_SUFFIX=.lib
SO_SUFFIX=.dll
endif

include $(srcdir)/Makefile.nasm

$(OUTDIR)/bin/%$(EXEC_SUFFIX) : $(OUTDIR)/objects/%.o
	mkdir -p $(dir $@)
	$(LD) $(LDFLAGS) -o $@ $^

$(OUTDIR)/objects/%.o : %.asm
	mkdir -p $(dir $@)
	$(NASM) $(NASMFLAGS) -o $@ $<

$(OUTDIR)/objects/%.o : $(OUTDIR)/popped/%.popped
	mkdir -p $(dir $@)
	$(NASM) $(NASMFLAGS) -o $@ $<

$(OUTDIR)/popped/%.popped : %.pop
	mkdir -p $(dir $@)
	$(POPPER) < $< > $@

$(OUTDIR)/preproc/%.asm : $(OUTDIR)/popped/%.popped
	mkdir -p $(dir $@)
	$(NASM) $(NASMFLAGS) -E $< > $@

$(OUTDIR)/popped-index/%.popped : %.pop
	mkdir -p $(dir $@)
	SUFFIX=" " $(POPPER) < $< > $@

$(OUTDIR)/preproc-index/%.asm : $(OUTDIR)/popped-index/%.popped
	mkdir -p $(dir $@)
	$(NASM) $(NASMFLAGS) -E $< > $@

$(OUTDIR)/bin/%.bin : $(OUTDIR)/popped-index/%.popped
	mkdir -p $(dir $@)
	$(NASM) $(NASMFLAGS) -f bin -o $@ $<

$(OUTDIR)/lib/%$(SO_SUFFIX) :
	mkdir -p $(dir $@)
	$(LD) $(LDFLAGS) -shared -o $@ $^

#
# Rules
#

OPCODE_H=$(OUTDIR)/include/north/$(PLATFORM)-$(BITS)/opcodes.h

ifndef NORTH_WORDS_MAKEFILE
$(OUTDIR)/bin/north-words$(EXEC_SUFFIX) :
	$(MAKE) -C $(srcdir)/src/words
endif

$(OPCODE_H): $(OUTDIR)/bin/north-words$(EXEC_SUFFIX)
	mkdir -p $(dir $@)
	$(EXEC_$(PLATFORM)_$(BITS)) $(OUTDIR)/bin/north-words$(EXEC_SUFFIX) 1 > $@

clean:
	rm -rf $(OUTDIR)

dist-clean:
	rm -rf $(srcdir)/build

