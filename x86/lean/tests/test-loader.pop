%include "north.h"
%include "indexed.h"

; import libc printf/n puts/1
import libc atoi/1/1 exit/1
import libc malloc/1/1 free/1
import libc open/3/1 close/1/1 read/3/1 stat/2/1 stat64/2/1 mmap/6/1 munmap/2/1 perror/0
; import libdl dlopen/2/1 dlsym/2/1

const O_RDONLY 0
const O_WRONLY 1
const O_RDWR 2

string ok "OK"
string error "ERROR"
string bye "BYE"

def write_ok
	literal ok cputs drop
	fexit

def write_bye
	literal bye cputs drop
	fexit

def failed
	literal error cputs
  cperror
	literal -1 cexit

string int_fmt "%i",0xA

def write_int
	literal 2 overn literal int_fmt literal 2 cprintf literal 3 dropn
	fexit

string hex_fmt "%x",0xA

def write_hex
	literal 2 overn literal hex_fmt literal 2 cprintf literal 3 dropn
	fexit

const MAP_PRIVATE 2
const PROT_READ 1

def write_stack
	here literal .fmt literal 2 cprintf literal 3 dropn
	fexit
.fmt:	db	'%x: %x %x | %x %x || %x %x %x %x | %x %x | %x %x %x %x %x %x %x %x %x %x %x',0xA,0

page_size equ 4096

def page_align
  literal 2 overn
  literal page_size
  int_div
  literal 1 int_add
  literal page_size int_mul
  roll fexit
  
def map_fd
	literal 0 literal 3 overn literal MAP_PRIVATE literal PROT_READ
	literal 7 overn page_align swap drop ; size
	literal 0 cmmap
	rot drop drop rot drop drop rot drop drop
	roll
	fexit

; def read_file_size
;   literal 8192 roll fexit

def stat_alloc
  begin_frame
  literal sizeof_stat stack_allot
  continue

%if BITS==64

sizeof_stat equ (18 * ptrsize)

def stat_size
  literal 2 overn
  literal 6 literal ptrsize int_mul
  int_add peek roll fexit
  
def read_file_size
  begin_frame
  stat_alloc arg0 cstat64 literal 2 dropn
  stat_size return1

%else

sizeof_stat equ (22 * ptrsize)

def stat_size
  literal 2 overn
  literal 11 literal ptrsize int_mul
  int_add peek roll fexit
  
def read_file_size
  begin_frame
  stat_alloc arg0 cstat literal 2 dropn
  stat_size return1

%endif

def init
	; check number command line arguments
	literal 2 overn write_int literal 2 eq ifzero failed
	literal 3 overn literal ptrsize int_add peek cputs
  read_file_size write_int swap
	; open and read / memory map first command line argument
	literal 0 swap literal O_RDONLY swap copen roll drop drop swap drop
	write_int
	dup ifnegative failed
	; map file
  ; literal 8192 swap
  map_fd dup literal -1 eq ifnotzero failed
  write_ok
  ; cputs dup peek write_hex drop
	; copy argc, argv, and exec
  literal 6 overn literal 6 overn literal 2 overn
  eval_ptr_index
  literal 2 dropn
	; unmap and close the file
  literal 2 overn swap
  cmunmap ifnegative failed literal 2 dropn
	cclose ifnegative failed drop drop
  ; clean exit
	write_bye
	literal 0 roll
	fexit

finalize_dictionary
