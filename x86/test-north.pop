import libc printf/n puts/1 atoi/1/1 exit/1
import libdl dlopen/2/1 dlsym/2/1

export yes noo

string testlib 'libc.so.6'
string testfn 'puts'

def dltest
	literal,1,literal,testlib,cputs,cdlopen
	literal,testfn,swap,cdlsym
	literal,testfn,swap,asmcall_1
	literal,5,dropn
	fexit

string msg "Hello",0xA
const len $ - msg

string boo "BOO"
string world "world"
const worldlen $ - world
string num "254"
string args "%x %s %x",0xA
string yesstr "YES"
string noostr "NOO"

def hellohello
	hello hello fexit

def writeboo
	literal boo cputs drop fexit

def noo
	literal noostr cputs drop fexit

def yes
	literal yesstr cputs drop fexit

def test_ifzero
	literal 0 ifzero yes
	literal 1 ifzero noo
	fexit

def test_ifnotzero
	literal 0 ifnotzero noo
	literal 1 ifnotzero yes
	fexit

def write_stack
	here literal .fmt cprintf literal 2 dropn
	fexit
.fmt:	db	'%x: %x %x | %x %x || %x %x %x %x | %x %x | %x %x %x %x %x %x %x %x',0xA,0

def write_here
	literal 1 here literal .fmt cprintf literal 3 dropn
	fexit
.fmt:	db	'here = %x %x',0xA,0

def test_printf
	write_here
	literal 6 literal 5 literal 4 literal 3 literal 2 literal 1 swap
	literal .fmt cprintf
	literal 7 dropn
	write_here
	fexit
.fmt:	db	'Hey %x %x %x %x %x %x %x',0xA,0

def init
	write_stack
	hello hello hellohello hellohello yes noo
	; call ra, eval ra, argc, argv
	test_ifzero test_ifnotzero
	; print yes or no if there are any command line args or not
	literal 2 overn literal -1 int_add dup ifzero noo ifnotzero yes
	literal 1 literal 2 test_printf drop drop
	; print the stack
	write_stack
	noo
	; literal 65 write_stack drop
	literal 1 literal 2 test_printf drop drop
	; print argc, argv[0], and the ??
	; todo frame pointer for argn
	write_stack literal 4 overn literal 4 overn peek literal 4 overn literal args cprintf literal 4 dropn
	; make some calls internally and externally
	hello literal msg literal boo cputs cputs drop cputs drop
	; external calls with args and a return
	literal num catoi swap drop
	; try dlopen
	dltest
	; exit with atoi's return value
	roll
	break
	fexit
