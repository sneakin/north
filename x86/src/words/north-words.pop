%include "north.h"

include "data_stack.pop"
include "pseudo-ops.pop"
include "libc.pop"

; import libc printf/n

string fmt "%x %i %i",0xA
string stack_fmt "%x %x %x %x %x %x %x | %x %x %x %x %x %x %x",0xA

def map_dict ; ( fn dict num-entries )
	literal 3 overn literal 5 overn direct_eval
	literal 5 overn swap
	int32 dict_entry_size int_add
	literal 4 overn
	literal 1 int_sub
	dup ifnotzero map_dict
	literal 3 dropn
	fexit

string dict_entry_fmt "%4i %4x %28s %8x %8x %8x %x",0xA

def print_dict_entry
	; entry addr
	literal 2 overn
	dup dup
	; entry code
	dup peek swap
	; entry data
	cell_size int_add dup peek swap
	; entry name
	cell_size int_add peek cell_size int_add
	; entry index number
	literal 7 overn dict_entry_index dup
	; print
	literal dict_entry_fmt literal 8 cprintf
	literal 9 dropn
	fexit

string short_dict_entry_fmt "%32s equ %6i ;; %s",0xA

def short_print_dict_entry
	; entry addr
	literal 2 overn
  ; entry name
  dup int32 dict_entry_name int_add peek seq_data
	; entry index number
	swap dup dict_entry_index swap
	; entry label
	int32 dict_entry_label int_add peek seq_data
	; print
	literal short_dict_entry_fmt literal 4 cprintf
	literal 5 dropn
	fexit

def print_dict_entry_offset
	; entry addr
	literal 2 overn
  ; entry name
  dup int32 dict_entry_name int_add peek seq_data
	; entry offset
	swap dup dictionary int_sub swap
	; entry name
	int32 dict_entry_label int_add peek seq_data
	; print
	literal short_dict_entry_fmt literal 4 cprintf
	literal 5 dropn
	fexit

string heading "Index Hex Word Data Code Address",0xA

def seq_data
	rot
	cell_size int_add
	rot
	fexit

def print_dict_stats
	dict_entry_length dictionary_size dictionary literal fmt literal 4 cprintf
	literal 5 dropn
	fexit
  
def print_dict
	print_dict_stats
	literal heading literal 1 cprintf literal 2 dropn
	literal print_dict_entry dictionary seq_data dictionary_size map_dict
	literal 3 dropn
	fexit
  
def short_print_dict
	literal short_print_dict_entry dictionary seq_data dictionary_size map_dict
	literal 3 dropn
	fexit
  
def print_dict_offsets
	literal print_dict_entry_offset dictionary seq_data dictionary_size map_dict
	literal 3 dropn
	fexit
  
def init
	; try the first two entries
	;dictionary seq_data print_dict_entry
	;cell_size int_add cell_size int_add cell_size int_add short_print_dict_entry
	;literal 1 dropn
  ;; number of command line args determines mode
	literal 2 overn literal 3 eq ifnotzero print_dict_offsets
	literal 2 overn literal 2 eq ifnotzero short_print_dict
	literal 2 overn literal 1 eq ifnotzero print_dict
	; clean exit
	literal 0 roll
	fexit

finalize_dictionary
